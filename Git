
一、把文件添加到版本库
	1、添加到版本库的暂缓区（stage/index），用git add命令 (例子：git add Git)

	2、提交到版本库的暂缓区（stage/index），用git commit -m "some msg"命令 (例子：git commit -m "add Git file")
	------------------------------------------------------------------------------------
	  F:\TestProjection\learngit>git commit -m "add Git file"
							 [master (root-commit) 7e71d95] add Git file
							 1 file changed, 0 insertions(+), 0 deletions(-)
							 create mode 100644 Git
	------------------------------------------------------------------------------------

二、查看状态(git status )

	情况一：没有东西需要提交，而且工作目录是干净的
		------------------------------------------------------------------------------------
	   On branch master
	   Your branch is up to date with 'origin/master'.

	   nothing to commit, working tree clean
		------------------------------------------------------------------------------------ 
		
	情况二：没有东西需要提交，而且工作目录是干净的【有一个commit可以push到origin/master分支】
		------------------------------------------------------------------------------------
		On branch master
		Your branch is ahead of 'origin/master' by 1 commit.
		  (use "git push" to publish your local commits)

		nothing to commit, working tree clean
		------------------------------------------------------------------------------------
	  
	情况三：【Changes not staged for commit】表示还没被添加到暂缓区
		------------------------------------------------------------------------------------
		On branch master
		Your branch is up to date with 'origin/master'.

		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   Git

		no changes added to commit (use "git add" and/or "git commit -a")
		------------------------------------------------------------------------------------

	情况四：【Changes to be committed】，表示已经添加到暂缓区了，正在准备被提交（commit）。
		------------------------------------------------------------------------------------
		On branch master
		Your branch is up to date with 'origin/master'.

		Changes to be committed:
		  (use "git reset HEAD <file>..." to unstage)

				modified:   Git
		------------------------------------------------------------------------------------
		
	情况五：【Untracked files】，意思是还没添加追踪，从没git add过，所以没被git版本库管理起来。
        ------------------------------------------------------------------------------------
		On branch master
		Your branch is up to date with 'origin/master'.

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)

				Git

		nothing added to commit but untracked files present (use "git add" to track)
        ------------------------------------------------------------------------------------		

三、提交修改(git add & git commit -m "**")

	1、 将文件添加到暂缓区(git add 'file')
		------------------------------------------------------------------------------------
		F:\TestProjection\learngit>git add Git

		F:\TestProjection\learngit>
		F:\TestProjection\learngit>
		------------------------------------------------------------------------------------

	2、 提交commit (git commit -m "***")
		------------------------------------------------------------------------------------
		F:\TestProjection\learngit>git commit -m "update Git file"
		[master 4983b4f] update Git file
		 1 file changed, 64 insertions(+)
		------------------------------------------------------------------------------------
		
四、版本回退
 
1、查看提交记录(git log /git log --pretty=online)
	 ----------------------------------------------------------------------------------------
	 F:\TestProjection\learngit>git log --pretty=oneline
		c9e97d39de7b14c170adfe269c0f506c874515f6 (HEAD -> master, origin/master) update Git file
		4983b4f08832fd483feb469f823aea9879f907d4 update Git file
		7e71d9508684ade9b247d44f5910d7ecb77b31c4 add Git file
	 ----------------------------------------------------------------------------------------
	说明："c9e97...74515f6"是commit id，版本号，和SVN不一样，Git的commit id不是1,2,3递增的数字，
		而是一个SHA1计算出来的一个非常大的数字，用十六进制表示。为什么commit id需要用这么一大串数字表示呢？
		因为Git是分布式的版本控制系统

2、回退版本命令

	情况一：还在工作区
	  2.1：git checkout -- file(文件名)
	  
	情况二：已经add加到暂存区
	  2.2.1: git reset --hard commit_id（id前7位）
	  
		  --回退之前-----------------------------------------------------------------------------
		  F:\TestProjection\learngit>git log --pretty=oneline
			ef8b60a525882486e1242b1bc9be2af84e556e46 (HEAD -> master, origin/master) update Git file 'version return'
			c9e97d39de7b14c170adfe269c0f506c874515f6 update Git file
			4983b4f08832fd483feb469f823aea9879f907d4 update Git file
			7e71d9508684ade9b247d44f5910d7ecb77b31c4 add Git file
		  --------------------------------------------------------------------------------------
		  &> git reset --hard c9e97d3 【回退到指定的版本】
		  
		  --回退之后----------------------------------------------------------------------------
		  F:\TestProjection\learngit>git log --pretty=oneline
			c9e97d39de7b14c170adfe269c0f506c874515f6 (HEAD -> master) update Git file
			4983b4f08832fd483feb469f823aea9879f907d4 update Git file
			7e71d9508684ade9b247d44f5910d7ecb77b31c4 add Git file
		  --------------------------------------------------------------------------------------
		  &> git reflog  【(查看命令历史)这个命令记录着我们的每一个命令，不管是回退的还是没有回退的】
		  --------------------------------------------------------------------------------------
		  F:\TestProjection\learngit>git reflog
			c9e97d3 (HEAD -> master) HEAD@{0}: reset: moving to c9e97d3
			ef8b60a (origin/master) HEAD@{1}: commit: update Git file 'version return'
			c9e97d3 (HEAD -> master) HEAD@{2}: commit: update Git file
			4983b4f HEAD@{3}: commit: update Git file
			7e71d95 HEAD@{4}: commit (initial): add Git file
		  ---------------------------------------------------------------------------------------
	  
	  2.2.2: git reset --hard HEAD^
		  说明：HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
				当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100


五、创建、合并、删除分支
	1、创建
		1.1、创建分支(git branch 【分支名】)
		1.2、切换分支(git checkout 【分支名】)
		1.3、创建并切换分支(git checkout -b 【分支名】 )
			----------------------------------------------------------------------------------------------
				F:\TestProjection\learngit>git checkout -b dev
				Switched to a new branch 'dev'
			----------------------------------------------------------------------------------------------
		
		1.4、查看所有分支(git branch)【*标记为当前分支】
			-----------------------------------------------------------------------------------------------
				F:\TestProjection\learngit>git branch
				* dev
				  master

				F:\TestProjection\learngit>
			----------------------------------------------------------------------------------------------

	2、合并
		2.1、合并分支(git merge 【分支名】)
			！说明：默认采用的是快速合并Fast forward 模式。
			        优点：快速，
					缺点：当我们删除该分支后，将会丢失这个分支的所有信息
			-------------------------------------------------------------------------------------------------
				F:\TestProjection\learngit>git merge dev
				Updating 3f8f003..53d9d2d
				Fast-forward
				 Git | 39 +++++++++++++++++++++++++++++++++++++--
				 1 file changed, 37 insertions(+), 2 deletions(-)

				F:\TestProjection\learngit>
			---------------------------------------------------------------------------------------------------

		2.2、合并分支(git merge --no-ff -m "merge with no-ff" 【分支名】)
			---------------------------------------------------------------------------------------------
				F:\TestProjection\learngit>
				F:\TestProjection\learngit>git merge --no-ff -m "merge with no-ff" dev
				Merge made by the 'recursive' strategy.
				 Git | 29 ++++++++++++++++++++---------
				 1 file changed, 20 insertions(+), 9 deletions(-)

				F:\TestProjection\learngit>
			---------------------------------------------------------------------------------------------
			
		2.3、上述两种合并的区别(git log --graph --pretty=oneline --abbrev-commit)
		
			git merge 【分支名】
			---------------------------------------------------------------------------------
			F:\TestProjection\learngit>git log --graph --pretty=oneline --abbrev-commit
			* 712edff (HEAD -> dev, origin/master, master) update Git file
			* 53d9d2d update Git file
			* 3f8f003 deleted test
			* d6cca48 add test.txt
			* 9ea989d deleted LICENSE file
			* a2c9222 deleted test file
			* 423ba89 update Git file
			* 8c61f13 update test file
			* d7a638d update test file
			* a38b319 add LICENSE and update test
			* 0278530 add test file
			* 5673e5d update Git file 'add git status type'
			* 3f136b1 update Git file 'version return 1.1'
			* 7b400aa update Git file 'versio return 1.'
			* ef8b60a update Git file 'version return'
			* c9e97d3 update Git file
			* 4983b4f update Git file
			* 7e71d95 add Git file

			F:\TestProjection\learngit>
			----------------------------------------------------------------------------------
			
			git merge --no-ff -m "merge with no-ff" 【分支名】
			---------------------------------------------------------------------------------------
			F:\TestProjection\learngit>git log --graph --pretty=oneline --abbrev-commit
			*   38685a3 (HEAD -> master) merge with no-ff
			|\
			| * 241986c (dev) update Git file --dev
			|/
			* 712edff (origin/master) update Git file
			* 53d9d2d update Git file
			* 3f8f003 deleted test
			* d6cca48 add test.txt
			* 9ea989d deleted LICENSE file
			* a2c9222 deleted test file
			* 423ba89 update Git file
			* 8c61f13 update test file
			* d7a638d update test file
			* a38b319 add LICENSE and update test
			* 0278530 add test file
			* 5673e5d update Git file 'add git status type'
			* 3f136b1 update Git file 'version return 1.1'
			* 7b400aa update Git file 'versio return 1.'
			* ef8b60a update Git file 'version return'
			* c9e97d3 update Git file
			* 4983b4f update Git file
			* 7e71d95 add Git file

			F:\TestProjection\learngit>
			---------------------------------------------------------------------------------------
			
		
	3、删除
		3.1、删除分支(git branch -d 【分支名】)
		------------------------------------------------------------------------------------------------
			F:\TestProjection\learngit>git branch -d dev
			Deleted branch dev (was 53d9d2d).

			F:\TestProjection\learngit>
		-----------------------------------------------------------------------------------------------
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

